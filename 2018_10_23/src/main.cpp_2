/* Copyright 2016 Kristofer Björnson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** @package TBTKtemp
 *  @file main.cpp
 *  @brief New project
 *
 *  Empty template project.
 *
 *  @author Kristofer Björnson
 */

#include "TBTK/Model.h"
#include "TBTK/Plotter.h"
#include "TBTK/Solver/Diagonalizer.h"
#include "TBTK/PropertyExtractor/Diagonalizer.h"
#include "TBTK/Streams.h"

#include <complex>

using namespace std;
using namespace TBTK;
using namespace Plot;

Model create1DModel(){
	const int SIZE_X = 1000;
	double t = 1;

	Model model;
	for(int x = 0; x < SIZE_X; x++){
		model << HoppingAmplitude(
			-t,
			{(x+1)%SIZE_X},
			{x}
		) + HC;
	}
	model.construct();

	return model;
}

Model create2DModel(){
	const int SIZE_X = 40;
	const int SIZE_Y = 40;
	double t = 1;

	Model model;
	for(int x = 0; x < SIZE_X; x++){
		for(int y = 0; y < SIZE_Y; y++){
			model << HoppingAmplitude(
				-t,
				{(x+1)%SIZE_X, y},
				{x, y}
			) + HC;
			model << HoppingAmplitude(
				-t,
				{x, (y+1)%SIZE_Y},
				{x, y}
			) + HC;
		}
	}
	model.construct();

	return model;
}

Model create3DModel(){
	const int SIZE_X = 20;
	const int SIZE_Y = 20;
	const int SIZE_Z = 20;
	double t = 1;

	Model model;
	for(int x = 0; x < SIZE_X; x++){
		for(int y = 0; y < SIZE_Y; y++){
			for(int z = 0; z < SIZE_Z; z++){
				model << HoppingAmplitude(
					-t,
					{(x+1)%SIZE_X, y, z},
					{x, y, z}
				) + HC;
				model << HoppingAmplitude(
					-t,
					{x, (y+1)%SIZE_Y, z},
					{x, y, z}
				) + HC;
				model << HoppingAmplitude(
					-t,
					{x, y, (z+1)%SIZE_Z},
					{x, y, z}
				) + HC;
			}
		}
	}
	model.construct();

	return model;
}

int main(int argc, char **argv){
	string filenames[3] = {
		"figures/DOS_1D.png",
		"figures/DOS_2D.png",
		"figures/DOS_3D.png"
	};

	for(int n = 0; n < 3; n++){
		Model model;
		switch(n){
		case 0:
			model = create1DModel();
			break;
		case 1:
			model = create2DModel();
			break;
		case 2:
			model = create3DModel();
			break;
		default:
			break;
		}

		Solver::Diagonalizer solver;
		solver.setModel(model);
		solver.run();

		PropertyExtractor::Diagonalizer propertyExtractor(solver);
		propertyExtractor.setEnergyWindow(-10, 10, 1000);
		Property::DOS dos = propertyExtractor.calculateDOS();

		Plotter plotter;
		plotter.plot(dos, 0.03, 101);
		plotter.save(filenames[n]);
	}

	return 0;
}
